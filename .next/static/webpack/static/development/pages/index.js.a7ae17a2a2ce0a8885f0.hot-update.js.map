{"version":3,"file":"static/webpack/static/development/pages/index.js.a7ae17a2a2ce0a8885f0.hot-update.js","sources":["webpack:///./components/ToDoCard.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { CardHeader } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Search from '@material-ui/icons/Search';\n\nimport ToDoList from './ToDoList';\nimport AddToDo from './AddToDo';\n\nclass ToDoCard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            newToDo: '',\n            checked: [],\n            initialToDoList: [\n                {\n                    text: 'Something to do!'\n                },\n                {\n                    text: 'Something else to do!'\n                },\n                {\n                    text: 'Another thing to do!'\n                },\n                {\n                    text: 'Woah a lot to do!'\n                },\n                {\n                    text: 'Crazy thing to do!'\n                },\n            ],\n            toDoList: [\n                {\n                    text: 'Something to do!'\n                },\n                {\n                    text: 'Something else to do!'\n                },\n                {\n                    text: 'Another thing to do!'\n                },\n                {\n                    text: 'Woah a lot to do!'\n                },\n                {\n                    text: 'Crazy thing to do!'\n                },\n            ],\n        };\n    }\n\n    handleToggle = (value) => () => {\n        const array = [...this.state.toDoList];\n        if (value !== -1) {\n            array.splice(value, 1);\n            this.setState({toDoList: array});\n        }\n    };\n\n    handleChange = (e) => {\n        const { name, type, value } = e.target;\n        const val = type === 'number' ? parseFloat(value) : value;\n        this.setState({ [name]: val })\n    };\n\n    handleKeyPress = (event) => {\n        if (event.key == 'Enter') {\n          this.addToDo(event.value)\n        }\n    }\n\n    addToDo = (value) => (e) => {\n        console.log(e)\n        if (e.key === 'Enter' || e.target.name === 'newToDoButton') {\n            const array = [...this.state.toDoList];\n            const toDoObj = { text: value }\n            array.push(toDoObj);\n            this.setState({toDoList: array, newToDo: ''})\n        }\n    }\n\n    handleSearch = (e) => {\n        var updatedList = this.state.initialToDoList;\n        updatedList = updatedList.filter((toDo) => {\n          return toDo.text.toLowerCase().search(\n            e.target.value.toLowerCase()) !== -1;\n        });\n        this.setState({toDoList: updatedList});\n      }\n\n    render() {\n        return (\n            <Card >\n                <CardHeader title={'Stuff You Gotta Do'}>\n                </CardHeader>\n                <CardContent>\n                    <TextField\n                        onChange={this.handleSearch}\n                        placeholder=\"Have a look...\"\n                        multiline\n                        label=\"\"\n                        InputProps={{\n                            endAdornment: (\n                              <InputAdornment variant=\"filled\" position=\"end\">\n                                <Search/>\n                              </InputAdornment>\n                            ),\n                        }}\n                    />\n                    <ToDoList \n                        \n                        handleToggle={this.handleToggle.bind(this)} \n                        toDoList={this.state.toDoList} \n                        checked={this.state.checked} \n                    />\n                </CardContent>\n                <AddToDo \n                    handleAddToDo={this.addToDo.bind(this)} \n                    handleToDoChange={this.handleChange} \n                    newToDo={this.state.newToDo} \n                />\n            </Card>\n        );\n    }\n}\n\nexport default ToDoCard;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA0CA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AANA;AACA;AA3CA;AAkDA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAvDA;AAyDA;AACA;AACA;AACA;AACA;AA7DA;AA8DA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AARA;AACA;AA/DA;AAyEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA9EA;AACA;AACA;AACA;AAEA;AADA;AAIA;AADA;AAIA;AADA;AAIA;AADA;AAIA;AADA;AAIA;AAEA;AADA;AAIA;AADA;AAIA;AADA;AAIA;AADA;AAIA;AADA;AAjCA;AAFA;AAwCA;AACA;;;AAwCA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AAnHA;AACA;AAqHA;;;;A","sourceRoot":""}